# stdio implementation of call to Github MCP

import subprocess
import json

def call_github_mcp_via_stdio(request_json: dict) -> dict:
    """
    Launches the GitHub MCP server via npx and communicates over stdio.
    """
    try:
        # Start the MCP server subprocess
        proc = subprocess.Popen(
            ["npx", "-y", "@modelcontextprotocol/server-github"],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )

        # Send request as JSON string
        input_str = json.dumps(request_json) + "\n"
        stdout_data, stderr_data = proc.communicate(input=input_str, timeout=10)

        if stderr_data:
            print("⚠️ MCP stderr:", stderr_data)

        return json.loads(stdout_data.strip())

    except subprocess.TimeoutExpired:
        proc.kill()
        return {"status": "error", "message": "MCP server timed out."}
    except Exception as e:
        return {"status": "error", "message": str(e)}

# Example usage
if __name__ == "__main__":
    request = {
        "tool": "search_repositories",
        "args": {
            "query": "unclecode/crawl4ai"
        }
    }
    response = call_github_mcp_via_stdio(request)
    print("✅ MCP Response:", response)
