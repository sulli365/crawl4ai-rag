"""
here's a Python helper script that:

    Uses subprocess to call npx -y @modelcontextprotocol/server-github

    Sends a request to the server (assuming it starts quickly and responds over HTTP)

    Cleans up after the request is complete
	
Assumptions:

    The @modelcontextprotocol/server-github server runs a temporary local server (e.g., on localhost:3000 or similar)

    It responds to a single HTTP request before exiting ‚Äî or exits after the first use

    You want to call it from within a Python app or workflow (e.g., your coding assistant)

If the actual server behavior differs, we can tweak the logic.

"""


import subprocess
import requests
import time

def wait_for_server_ready(url, timeout=10, interval=0.5):
    """
    Polls the given URL until the server responds or timeout is reached.

    Returns True if server becomes ready, False otherwise.
    """
    print(f"‚è≥ Waiting for server to respond at {url}...")
    start_time = time.time()
    while time.time() - start_time < timeout:
        try:
            r = requests.get(url)
            if r.status_code < 500:
                print("‚úÖ Server is ready.")
                return True
        except requests.exceptions.ConnectionError:
            pass
        time.sleep(interval)
    print("‚ùå Server did not become ready in time.")
    return False

def run_github_mcp_and_request(
    request_url: str = "http://localhost:3000",
    request_timeout: int = 10
):
    """
    Starts the GitHub MCP server using `npx`, sends a request once the server is ready, then exits.

    Parameters:
        request_url (str): The URL to send a request to once the server is up.
        request_timeout (int): Timeout for the request itself.

    Returns:
        dict: Response data or error message.
    """
    try:
        print("üîÅ Starting GitHub MCP server...")
        proc = subprocess.Popen(
            ["npx", "-y", "@modelcontextprotocol/server-github"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )

        if not wait_for_server_ready(request_url, timeout=15):
            proc.kill()
            return {"status": "error", "message": "MCP server did not become ready."}

        print("üì° Sending request to MCP server...")
        response = requests.get(request_url, timeout=request_timeout)

        # Wait for the server to shut down on its own (if it does)
        try:
            proc.wait(timeout=5)
        except subprocess.TimeoutExpired:
            proc.kill()

        return {
            "status": "success",
            "status_code": response.status_code,
            "data": response.text
        }

    except requests.exceptions.RequestException as e:
        return {"status": "error", "message": f"HTTP request failed: {e}"}
    except Exception as e:
        return {"status": "error", "message": f"Unexpected error: {e}"}

# Example usage
if __name__ == "__main__":
    result = run_github_mcp_and_request()
    print("‚úÖ Done:", result)

